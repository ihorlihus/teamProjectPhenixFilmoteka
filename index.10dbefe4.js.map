{"mappings":"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","sources":["src/js/fetchQueryMovies.js","src/js/createMovieCard.js","src/js/fetchTrendingMovies.js","node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/spinner.js","<<jsx-config-pragma.js>>","src/js/infinityScroll.js","src/js/infinityScrollQuery.js","src/js/app.js","src/js/modalTeam.js","src/js/fetchGenres.js","src/js/preloader.js"],"sourcesContent":["// API Key: ff98b74c6ada2972698b8eff6707845a\n// Get trending\nimport { fetchOptions } from './infinityScroll';\nimport { setObserverOff } from './infinityScroll';\n\nexport const fetchQueryMovies = async name => {\n  try {\n    const response = await fetch(`\n        https://api.themoviedb.org/3/search/movie?api_key=ff98b74c6ada2972698b8eff6707845a&language=en-US&page=${fetchOptions.currentQueryPage}&include_adult=false&query=${name}`);\n    fetchOptions.currentQueryPage += 1;\n    setObserverOff();\n    return await response.json();\n  } catch (error) {\n    throw Error(response.statusText);\n  }\n};\n","\nconst saveGenres = localStorage.getItem(\"genres\");\n\nconst localGenres = JSON.parse(saveGenres);\n\n\nexport const createMovieCard = movies => {\n  return movies\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        genre_ids,\n        id,\n        vote_average,\n      }) => {\n        let moviesGenres;\n\n        let moviesGenresFindName = localGenres\n          .filter(({ id }) => genre_ids.includes(id))\n          .map(({ name }) => name);\n\n        if (moviesGenresFindName.length <= 2) {\n          moviesGenres = moviesGenresFindName.join(', ');\n        } else {\n          moviesGenres =\n            moviesGenresFindName.slice(0, 2).join(', ') + ', Other';\n        }\n        const voteAverageToString = vote_average.toString();\n        return `\n                <li class=\"card__item\" data-id=\"${id}\">\n                    <a class=\"card card__link\" data-id=\"${id}\">\n                        <img class=\"card__img\" data-id=\"${id}\" src='https://image.tmdb.org/t/p/w500${poster_path}' alt='${\n          title || name\n        }' loading=\"lazy\"/>\n                        <p class=\"card__title\" data-id=\"${id}\">${\n          title || name\n        }</p>\n                        <div class=\"card__inform\" data-id=\"${id}\">\n                            <p class=\"card__genres\">${moviesGenres}</p>\n                            <p class=\"card__date\">\n                              <span></span>| \n                            ${(\n                              release_date || first_air_date\n                            ).slice(0, 4)}</p>\n                            <span class=\"card__vote visually-hidden\">${voteAverageToString.slice(0,3)}</span>\n                        </div>\n                    </a>\n                </li>\n            `;\n      }\n    )\n    .join('');\n};\n","import { fetchOptions } from './infinityScroll'\n\nexport const fetchTrendingMovies = async (spinner) => {\n  try {\n    spinner.show()\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/week?api_key=ff98b74c6ada2972698b8eff6707845a&page=${fetchOptions.currentPage}`\n\n    );\n  spinner.hide()\n  return response.json();\n\n  } catch (error) {\n    throw Error(response.statusText);\n  }\n};\n\n\n// fetchTrendingMovies().then(movies => console.log(movies.results));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","export default class Spinner {\n    constructor({hidden = false}) {\n        this.refs = this.getRefs();\n        hidden && this.hide();\n    }\n\n    getRefs() {\n        const refs = {};\n        refs.loader = document.querySelector('.loader');\n        return refs;\n    }\n\n    show() {\n        this.refs.loader.classList.remove('is-hidden');\n    }\n\n    hide() {\n        this.refs.loader.classList.add('is-hidden')\n    }\n};\n",null,"import {createMovieCard} from './createMovieCard';\nimport { fetchTrendingMovies } from './fetchTrendingMovies';\nimport { refs } from './refs';\nimport Spinner from './spinner';\n\nexport let fetchOptions = {\n    currentPage: 1,\n    currentQueryPage: 1,\n};\n\nexport const resetPage = () => {\n    fetchOptions.currentPage = 1;\n}\n\nconst observerOptions = {\n  rootMargin: '0px',\n  threshold: 1.0,\n};\n\nconst observer = new IntersectionObserver(entries => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      onLoadMore();\n      console.log('is intersecting');\n    }\n  });\n}, observerOptions);\n\nsetObserverOn();\n\nexport function setObserverOn() {\n    observer.observe(document.querySelector('.scroll-check'));\n};\n    \nexport function setObserverOff() {\n    observer.unobserve(document.querySelector('.scroll-check'));\n};\n\n\nconst spinner = new Spinner({\n  loader: '.loader',\n  hidden: true,\n});\n\nfunction onLoadMore() {\n\nfetchTrendingMovies(spinner).then(movies => {\n    try {\n        if(fetchOptions.currentPage === movies.total_pages) {\n            refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n            window.alert('Sorry this is the last page, we do not have any movies for you :(');\n            setObserverOff();\n            return ;\n        }\n        fetchOptions.currentPage += 1;\n        refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n\n    } catch (error) {\n        console.log(error);\n    }\n});\n}\n\n","import {createMovieCard} from './createMovieCard';\nimport { fetchQueryMovies } from './fetchQueryMovies';\nimport {refs} from './refs';\nimport Spinner from './spinner';\nimport { searchMovieTrim} from './app';\nimport { setObserverOff } from './infinityScroll';\n\nexport let fetchOptions = {\n    currentPage: 1,\n    currentQueryPage: 1,\n};\n\nexport const resetQueryPage = () => {\n    fetchOptions.currentQueryPage = 1;\n}\n\nconst spinner = new Spinner({\n    loader: '.loader',\n    hidden: true,\n})\n\nexport function onLoadMoreQuery() {\n    setObserverOff();\n    fetchQueryMovies(searchMovieTrim).then(movies => {\n        \n        try {\n            refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n                \n        } catch (error) {\n            console.log(error);\n        }\n    });\n}","import { fetchQueryMovies } from './fetchQueryMovies';\nimport { createMovieCard } from './createMovieCard';\nimport { refs } from './refs';\nimport Spinner from './spinner';\nimport { resetPage } from './infinityScroll';\nimport { onLoadMoreQuery } from './infinityScrollQuery';\n\nconst spinner = new Spinner({\n  loader: '.loader',\n  hidden: true,\n});\nexport let searchMovieTrim = '';\n\nrefs.form.addEventListener('submit', event => {\n  event.preventDefault();\n\n  let searchMovie = event.target.elements.navigation__input.value;\n  searchMovieTrim = searchMovie.trim();\n\n  fetchQueryMovies(searchMovieTrim).then(movies => {\n    if (searchMovieTrim === '' || movies.results.length === 0) {\n      refs.notificate.classList.remove('navigation__notificate-hidden');\n      document.getElementById('myForm').reset();\n      setTimeout(() => {\n        refs.notificate.classList.add('navigation__notificate-hidden');\n      }, 5000);\n    } else {\n      refs.gallery.innerHTML = createMovieCard(movies.results);\n    }\n    spinner.show();\n  });\n\n  const observerOptions = {\n    rootMargin: '-100px',\n    threshold: 1.0,\n  };\n  const observerQuery = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        onLoadMoreQuery();\n      }\n    });\n  }, observerOptions);\n\n  observerQuery.observe(document.querySelector('.scroll-check'));\n});\n","const modalLinkEl = document.getElementById('modalTeam');\nconst modalEl = document.querySelector('.modal-team');\nmodalLinkEl.addEventListener('click', modalOpen);\n\nfunction modalOpen(event) {\n  event.preventDefault();\n  modalEl.classList.toggle('visually-hidden');\n  modalEl.addEventListener('keydown');\n}\n\n// function modalClose() {\n//   if (modalEl.classList.contains('visually-hidden') === false) {\n//     console.log('modal');\n//   }\n//   console.log('modal is close');\n// }\n","export const fetchGenres = async () => {\n    try {\n        const response = await fetch(`\n            https://api.themoviedb.org/3/genre/movie/list?api_key=ff98b74c6ada2972698b8eff6707845a&language=en-US\n        `);\n        return await response.json();\n    } catch (error) {\n        throw Error(response.statusText);\n    }\n}\n\n// function onGetGenres() {\n//     if (localStorage.getItem('genres')) {\n//         console.log(\"GENRES\");\n//         return;\n//     } else {\n//         fetchGenres().then(genres => {\n//             console.log(\"NO GNR\");\n//             localStorage.setItem(\"genres\", JSON.stringify(genres.genres));\n//         })\n//     }\n// }\n// onGetGenres();\n\nfetchGenres().then(genres => {\n    if (\"genres\") {\n        return;\n    } else {\n        localStorage.setItem(\"genres\", JSON.stringify(genres.genres));\n    }\n})","window.onload = function () {\n    document.body.classList.add('loaded_hiding');\n    window.setTimeout(function () {\n      document.body.classList.add('loaded');\n      document.body.classList.remove('loaded_hiding');\n    }, 1000);\n  }"],"names":["$bpxeT","parcelRequire","$d26123189b320653$var$saveGenres","localStorage","getItem","$d26123189b320653$var$localGenres","JSON","parse","$d26123189b320653$export$9d27b867a89df126","movies","map","param1","moviesGenres","poster_path","title","name1","name","release_date","first_air_date","genre_ids","id1","id","vote_average","moviesGenresFindName","filter","param","includes","length","join","slice","voteAverageToString","toString","concat","$067fe24ac3466aea$export$a2840eca364d9ff2","$parcel$interopDefault","$2TvXO","mark","_callee","spinner","response1","show","fetch","$0dda5a411dab1a32$export$e12dbb0aa5635c44","currentPage","_ctx","sent","hide","json","Error","response","statusText","Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$dd8ebecfaae47a78$export$2e2bcd8739ae039","Spinner","hidden","_hidden","this","refs","getRefs","loader","document","querySelector","classList","remove","add","currentQueryPage","$0dda5a411dab1a32$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","$0dda5a411dab1a32$var$spinner","then","total_pages","$4Nugj","gallery","insertAdjacentHTML","results","window","alert","$0dda5a411dab1a32$export$83528705734bea0e","error","console","log","rootMargin","threshold","unobserve","observe","$6380189e66398a48$export$908f733cb80721a6","$7e6258f3559d0f34$var$spinner","$7e6258f3559d0f34$export$b20e827591442787","form","addEventListener","event","preventDefault","searchMovie","elements","navigation__input","trim","notificate","getElementById","reset","setTimeout","innerHTML","$eed1e062f3f2d1b2$var$modalLinkEl","$eed1e062f3f2d1b2$var$modalEl","toggle","$26f18cb28b6ef3bc$export$e95d448b93b2cdb","genres","onload","body"],"version":3,"file":"index.10dbefe4.js.map"}