{"mappings":"kpBAsBA,IAAAA,EACAC,E,iJArBA,IAAIC,EAAU,GAoBdF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,KAelCL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,MCnBTE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,4JCAzDH,EAAA,S,uDCAA,IAAAI,EAAAJ,EAAA,SCAAA,EAAA,S,4BAIO,MAAMK,EAAkBC,GACtBA,EACJC,KACC,EAACC,YACCA,EAAWC,MACXA,EACAC,KAAAC,EAAIC,aACJA,EAAYC,eACZA,EAAchB,GACdA,EAAEiB,aACFA,MAEA,IAAIC,EACJ,MAAMC,EAASR,EACX,kCAAkCA,IAClC,wEAEES,EAAOL,GAAiBC,EACzBD,GAAgBC,EACjB,aAEJ,IAAIK,EAAuBC,EAAAC,GAAWC,OAAOd,KAAI,EAACG,KAAEA,KAAWA,IAG7DK,EADEG,EAAqBtB,QAAU,EAClBsB,EAAqBI,KAAK,MAGvCJ,EAAqBK,MAAM,EAAG,GAAGD,KAAK,MAAQ,UAGlD,MAAME,EAAYT,GAEd,QACEU,EAAsBX,EAAaY,WACzC,MAAO,qDACmC7B,gEACQA,gEACAA,WAAYmB,WAC5DP,GAASE,gFAEuCd,MAChDY,GAASE,qEAE0Cd,4DACP2B,wIAGxBP,EAAKM,MAAM,EAAE,gFAC4BE,EAAoBF,MAC7D,EACA,8GAQzBD,KAAK,IC9DV,I,EAAAlB,EAAAJ,EAAA,SCAA2B,EAAiB,IAAAC,IAAoB5B,EAAA,SAAA6B,QAA6C,SAAQC,OAAAC,KAAAC,KAAEN,WDIrF,WACLtB,EAAA6B,KAAKC,cAAcC,UAAUC,IAAI,iBACjC,IAAIC,EAAaC,aAAaC,QAAQ,SACtC,MAAMC,EAAmBtC,KAAKC,MAAMkC,GAChB,OAAfA,GAAmD,IAA5BG,EAAiB5C,QACzCQ,EAAA6B,KAAKQ,QAAQC,mBACX,aACArC,EAAgBmC,IAElBpC,EAAA6B,KAAKU,gBAAgBC,UAAY,IAEjCxC,EAAA6B,KAAKU,gBAAgBC,UAAY,mGACHzB,EAAAQ,sBFXpC,GAEAvB,EAAA6B,KAAKC,cAAcW,iBAAiB,SAI7B,WACLzC,EAAA6B,KAAKQ,QAAQG,UAAY,GACzB,IAAIP,EAAaC,aAAaC,QAAQ,SACtC,MAAMC,EAAmBtC,KAAKC,MAAMkC,GACjB,OAAfA,GAAmD,IAA5BG,EAAiB5C,QACxCQ,EAAA6B,KAAKQ,QAAQC,mBACX,aACArC,EAAgBmC,IAElBpC,EAAA6B,KAAKU,gBAAgBC,UAAY,IAEjCxC,EAAA6B,KAAKU,gBAAgBC,UAAY,mGACHzB,EAAAQ,yBAfpCvB,EAAA6B,KAAKa,YAAYD,iBAAiB,SAqBhC,WACEzC,EAAA6B,KAAKC,cAAcC,UAAUY,OAAO,iBACpC3C,EAAA6B,KAAKQ,QAAQG,UAAY,GACzB,IAAII,EAAWV,aAAaC,QAAQ,SACpC,MAAMU,EAAiB/C,KAAKC,MAAM6C,GACjB,OAAbA,GAA+C,IAA1BC,EAAerD,QACtCQ,EAAA6B,KAAKQ,QAAQC,mBACX,aACArC,EAAgB4C,IAElB7C,EAAA6B,KAAKU,gBAAgBC,UAAY,IAEjCxC,EAAA6B,KAAKU,gBAAgBC,UAAY,mGACHzB,EAAAQ,yB","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-0a6c5929e89ce3c7.js","src/index-lib.js","src/js/watchedAndQueueMovies.js","src/js/libraryMovieCard.js","src/js/renderLibrary.js","node_modules/@parcel/runtime-js/lib/runtime-1ff44fcd8ff9b665.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"QBut0\\\":\\\"index-lib.de184c37.js\\\",\\\"dcg2X\\\":\\\"img-library.e6a18f33.jpg\\\",\\\"k0T72\\\":\\\"index-lib.f0dc6a98.js\\\"}\"));","import './js/firebase';\nimport './js/fetchGenres';\nimport './js/preloader';\nimport './js/localstorage';\nimport './js/renderOpenModal';\nimport './js/modalTeamVersion';\nimport './js/watchedAndQueueMovies';\nimport './js/createMovieCard';\n\n","import { refs } from './refs.js';\nimport { createMovieCard } from './libraryMovieCard';\nimport { renderLibrary } from './renderLibrary';\nimport imgLibrary from '../images/img-library.jpg';\n\nrenderLibrary();\n\nrefs.watchedBtnLib.addEventListener('click', onWatchedBtnClick);\nrefs.queueBtnLib.addEventListener('click', onQueueBtnClick);\n\n\nexport function onWatchedBtnClick() {\n  refs.gallery.innerHTML = '';\n  let getWatched = localStorage.getItem('Watch');\n  const parsedGetWatched = JSON.parse(getWatched);\n  if (getWatched !== null && parsedGetWatched.length !== 0) {\n      refs.gallery.insertAdjacentHTML(\n        'afterbegin',\n        createMovieCard(parsedGetWatched)\n      );\n      refs.fillerContainer.innerHTML = '';\n    } else {\n      refs.fillerContainer.innerHTML = `<p class=\"fill-text\">Your list is empty. Choose a movie.</p>\n    <img class=\"img__library\"src=\"${imgLibrary}\" alt=\"popcorn\"/>`;\n    }\n  }\n\n\n\n  function onQueueBtnClick() {\n    refs.watchedBtnLib.classList.remove('button-active');\n    refs.gallery.innerHTML = '';\n    let getQueue = localStorage.getItem('Queue');\n    const parsedGetQueue = JSON.parse(getQueue);\n    if (getQueue !== null && parsedGetQueue.length !== 0) {\n      refs.gallery.insertAdjacentHTML(\n        'afterbegin',\n        createMovieCard(parsedGetQueue)\n      );\n      refs.fillerContainer.innerHTML = '';\n    } else {\n      refs.fillerContainer.innerHTML = `<p class=\"fill-text\">Your list is empty. Choose a movie.</p>\n    <img class=\"img__library\"src=\"${imgLibrary}\" alt=\"popcorn\"/>`;\n    }\n  }\n\n\n\n","import { saveGenres } from './createMovieCard';\nimport { localGenres } from './createMovieCard';\nimport listGenres from './genres.json';\n\nexport const createMovieCard = movies => {\n  return movies\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        id,\n        vote_average,\n      }) => {\n        let moviesGenres;\n        const imgURL = poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : \"https://via.placeholder.com/344x486/808080/FFFFFF?text=Sorry,no_image\";\n        \n        const date = (release_date || first_air_date)\n          ? (release_date || first_air_date)\n          : '0000-00-00';\n\n        let moviesGenresFindName = listGenres.genres.map(({ name }) => name);\n\n        if (moviesGenresFindName.length <= 2) {\n          moviesGenres = moviesGenresFindName.join(', ');\n        } else {\n          moviesGenres =\n            moviesGenresFindName.slice(0, 2).join(', ') + ', Other';\n        }\n\n        const filmGenre = moviesGenres\n          ? moviesGenres\n          : 'Other';\n        const voteAverageToString = vote_average.toString();\n        return `\n                <li class=\"card__item\" data-id=\"${id}\">\n                    <a class=\"card card__link\" data-id=\"${id}\">\n                        <img class=\"card__img\" data-id=\"${id}\" src='${imgURL}' alt='${\n          title || name\n        }' loading=\"lazy\"/>\n                        <p class=\"card__title\" data-id=\"${id}\">${\n          title || name\n        }</p>\n                        <div class=\"card__inform\" data-id=\"${id}\">\n                            <p class=\"card__genres\">${filmGenre}</p>\n                            <p class=\"card__date\">\n                              <span></span>|\n                            ${date.slice(0,4)}</p>\n                            <span class=\"card__vote visually-hidden\">${voteAverageToString.slice(\n                              0,\n                              3\n                            )}</span>\n                        </div>\n                    </a>\n                </li>\n            `;\n      }\n    )\n    .join('');\n};\n","import { refs } from './refs.js';\nimport { createMovieCard } from './libraryMovieCard';\nimport imgLibrary from '../images/img-library.jpg';\n\nexport function renderLibrary() {\n  refs.watchedBtnLib.classList.add('button-active');\n  let getWatched = localStorage.getItem('Watch');\n  const parsedGetWatched = JSON.parse(getWatched);\n   if (getWatched !== null && parsedGetWatched.length !== 0) {\n      refs.gallery.insertAdjacentHTML(\n        'afterbegin',\n        createMovieCard(parsedGetWatched)\n      );\n      refs.fillerContainer.innerHTML = '';\n    } else {\n      refs.fillerContainer.innerHTML = `<p class=\"fill-text\">Your list is empty. Choose a movie.</p>\n    <img class=\"img__library\"src=\"${imgLibrary}\" alt=\"popcorn\"/>`;\n    }\n  }\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"dcg2X\")).toString();"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$krGWQ","$b3c323d43fa21506$export$9d27b867a89df126","movies","map","poster_path","title","name","name1","release_date","first_air_date","vote_average","moviesGenres","imgURL","date","moviesGenresFindName","$parcel$interopDefault","$2eUFK","genres","join","slice","filmGenre","voteAverageToString","toString","$9d1298f15989bc28$exports","URL","resolve","import","meta","url","refs","watchedBtnLib","classList","add","getWatched","localStorage","getItem","parsedGetWatched","gallery","insertAdjacentHTML","fillerContainer","innerHTML","addEventListener","queueBtnLib","remove","getQueue","parsedGetQueue"],"version":3,"file":"index-lib.de184c37.js.map"}