{"mappings":"AAAO,MCGMA,EAAmBC,MAAOC,IACnC,IACI,MAAMC,QAAiBC,MAAM,gJACwGF,mBAErI,aAAaC,EAASE,OACxB,MAAOC,GACL,MAAMC,MAAMJ,SAASK,cCCtB,IAAIC,EAXgBR,WACvB,IACI,MAAME,QAAiBC,MAAM,iIAG7B,aAAaD,EAASE,OACxB,MAAOC,GACL,MAAMC,MAAMJ,SAASK,cAM7BE,GAAcC,MAAKC,IACfC,aAAaC,QAAQ,SAAUC,KAAKC,UAAUJ,EAAOA,SACrD,MAAMK,EAAaJ,aAAaK,QAAQ,UACxCT,EAAcM,KAAKI,MAAMF,MCdtB,MAAMG,EAAmBC,GACrBA,EAAOC,KACV,EAACC,YACGA,EAAWC,MACXA,EACAtB,KAAAuB,EAAIC,aACJA,EAAYC,eACZA,EAAcC,UACdA,EAASC,aAETA,MAGA,IAAIC,EAEAC,EAAuBtB,EACtBuB,QAAO,EAACC,GAAEA,KAASL,EAAUM,SAASD,KACtCX,KAAI,EAACpB,KAAEA,KAAWA,IAQvB,OALI4B,EADAC,EAAqBI,QAAU,EAChBJ,EAAqBK,KAAK,MAE1BL,EAAqBM,MAAM,EAAG,GAAGD,KAAK,MAAQ,SAG1D,qHAGgDb,WAAqBC,GAASC,mDACpED,GAASC,wEAELK,0CACCJ,GAAgBC,GAAgBU,MAAM,EAAG,6CACvCR,6GAKrBO,KAAK,ICxCPE,EAAO,CAChBC,QAASC,SAASC,cAAc,YAChCC,KAAMF,SAASC,cAAc,sBJFExC,WACjC,IAIE,aAHuBG,MACrB,8FAEcC,OAChB,MAAOC,GACP,MAAMC,MAAMJ,SAASK,cKDzB,GAAsBG,MAAKU,IACvBiB,EAAKC,QAAQI,UAAYvB,EAAgBC,EAAOuB,YAGpDN,EAAKI,KAAKG,iBAAiB,UAAWC,IAClCA,EAAMC,iBAEN,MACMC,EADcF,EAAMG,OAAOC,SAASC,kBAAkBC,MACxBC,OAEpCrD,EAAiBgD,GACZrC,MAAKU,IACFiB,EAAKC,QAAQI,UAAYvB,EAAgBC,EAAOuB,eClB5D,MAAMU,EAAcd,SAASe,eAAe,aACtCC,EAAUhB,SAASC,cAAc,eACvCa,EAAYT,iBAAiB,SAE7B,SAAmBC,GACjBA,EAAMC,iBACNS,EAAQC,UAAUC,OAAO,mBACzBF,EAAQX,iBAAiB,cCP3B,MAAMc,EAAO,CACXC,aAAcpB,SAASC,cAAc,eACrCoB,cAAerB,SAASC,cAAc,gBACtCqB,SAAUtB,SAASC,cAAc,iBAYnC,SAASsB,IACPC,OAAOC,oBAAoB,UAAWC,GACtCP,EAAKG,SAASL,UAAUU,OAAO,cASjC,SAASD,EAAcE,GACA,WACjBA,EAAEC,MACJN,IAvBJJ,EAAKC,aAAaf,iBAAiB,SAInC,WACEmB,OAAOnB,iBAAiB,UAAWqB,GACnCP,EAAKG,SAASL,UAAUa,IAAI,iBAL9BX,EAAKE,cAAchB,iBAAiB,QAASkB,GAC7CJ,EAAKG,SAASjB,iBAAiB,SAY/B,SAAyBuB,GACnBA,EAAEG,gBAAkBH,EAAEnB,QACxBc","sources":["src/js/fetchTrendingMovies.js","src/js/fetchQueryMovies.js","src/js/fetchGenres.js","src/js/createMovieCard.js","src/js/refs.js","src/js/app.js","src/js/modalTeam.js","src/js/modal.js"],"sourcesContent":["export const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      'https://api.themoviedb.org/3/trending/movie/week?api_key=ff98b74c6ada2972698b8eff6707845a'\n    );\n    return response.json();\n  } catch (error) {\n    throw Error(response.statusText);\n  }\n};\n\n// fetchTrendingMovies().then(movies => console.log(movies.results));\n","// API Key: ff98b74c6ada2972698b8eff6707845a\n// Get trending\n\nexport const fetchQueryMovies = async (name) => {\n    try {\n        const response = await fetch(`\n        https://api.themoviedb.org/3/search/movie?api_key=ff98b74c6ada2972698b8eff6707845a&language=en-US&page=1&include_adult=false&query=${name}\n            `);\n        return await response.json();\n    } catch (error) {\n        throw Error(response.statusText);\n    }\n}\n","export const fetchGenres = async () => {\n    try {\n        const response = await fetch(`\n            https://api.themoviedb.org/3/genre/movie/list?api_key=ff98b74c6ada2972698b8eff6707845a&language=en-US\n        `);\n        return await response.json();\n    } catch (error) {\n        throw Error(response.statusText);\n    }\n}\n\nexport let localGenres;\n\nfetchGenres().then(genres => {\n    localStorage.setItem(\"genres\", JSON.stringify(genres.genres));\n    const saveGenres = localStorage.getItem(\"genres\");\n    localGenres = JSON.parse(saveGenres);\n});\n","import {  localGenres } from \"./fetchGenres\";\n\nexport const createMovieCard = (movies) => {\n    return movies.map( \n        ({\n            poster_path,\n            title,\n            name,\n            release_date,\n            first_air_date,\n            genre_ids,\n            // genres,\n            vote_average,\n            \n        }) => {\n            let moviesGenres;\n\n            let moviesGenresFindName = localGenres\n                .filter(({ id }) => genre_ids.includes(id))\n                .map(({ name }) => name)\n\n            if (moviesGenresFindName.length <= 2) {\n                moviesGenres = moviesGenresFindName.join(', ')\n            } else {\n                moviesGenres = moviesGenresFindName.slice(0, 2).join(', ') + ' Other';\n            }\n\n            return `\n                <li>\n                    <a>\n                        <img src='https://image.tmdb.org/t/p/w500${poster_path}' alt='${title || name}' loading=\"lazy\"/>\n                        <p>${title || name}</p>\n                        <div>\n                            <p>${moviesGenres}</p>\n                            <p>${(release_date || first_air_date).slice(0, 4)}</p>\n                            <span>${vote_average}</span>\n                        </div>\n                    </a>\n                </li>\n            `\n            }).join('');\n}\n\n","export const refs = {\n    gallery: document.querySelector('.gallery'),\n    form: document.querySelector('.navigation__form'),\n}","\nimport {fetchTrendingMovies} from './fetchTrendingMovies';\nimport {fetchQueryMovies} from './fetchQueryMovies';\nimport {createMovieCard} from './createMovieCard';\nimport {refs} from './refs';\n\nfetchTrendingMovies().then(movies => {\n    refs.gallery.innerHTML = createMovieCard(movies.results);\n});\n\nrefs.form.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const searchMovie = event.target.elements.navigation__input.value;\n    const searchMovieTrim = searchMovie.trim();\n\n    fetchQueryMovies(searchMovieTrim)\n        .then(movies => {\n            refs.gallery.innerHTML = createMovieCard(movies.results);\n        })\n})\n","const modalLinkEl = document.getElementById('modalTeam');\nconst modalEl = document.querySelector('.modal-team');\nmodalLinkEl.addEventListener('click', modalOpen);\n\nfunction modalOpen(event) {\n  event.preventDefault();\n  modalEl.classList.toggle('visually-hidden');\n  modalEl.addEventListener('keydown');\n}\n\n// function modalClose() {\n//   if (modalEl.classList.contains('visually-hidden') === false) {\n//     console.log('modal');\n//   }\n//   console.log('modal is close');\n// }\n","const refs = {\n  openModalBtn: document.querySelector('.modal-open'),\n  closeModalBtn: document.querySelector('.modal-close'),\n  backdrop: document.querySelector('.js-backdrop'),\n};\n\nrefs.openModalBtn.addEventListener('click', onOpenModal);\nrefs.closeModalBtn.addEventListener('click', offCloseModal);\nrefs.backdrop.addEventListener('click', onBackdropClick);\n\nfunction onOpenModal() {\n  window.addEventListener('keydown', onEscKeyPress);\n  refs.backdrop.classList.add('show-modal');\n}\n\nfunction offCloseModal() {\n  window.removeEventListener('keydown', onEscKeyPress);\n  refs.backdrop.classList.remove('show-modal');\n}\n\nfunction onBackdropClick(e) {\n  if (e.currentTarget === e.target) {\n    offCloseModal();\n  }\n}\n\nfunction onEscKeyPress(e) {\n  const ESC_KEY_CODE = 'Escape';\n  if (e.code === ESC_KEY_CODE) {\n    offCloseModal();\n  }\n}\n"],"names":["$eeb1a3c6a97310e8$export$908f733cb80721a6","async","name","response","fetch","json","error","Error","statusText","$5844b68ee09a1fe1$export$51d062533fa741c4","$5844b68ee09a1fe1$export$e95d448b93b2cdb","then","genres","localStorage","setItem","JSON","stringify","saveGenres","getItem","parse","$9134abd8877f9bb7$export$9d27b867a89df126","movies","map","poster_path","title","name1","release_date","first_air_date","genre_ids","vote_average","moviesGenres","moviesGenresFindName","filter","id","includes","length","join","slice","$ee27a4d7c64fc8c4$export$21666b427502ea6d","gallery","document","querySelector","form","innerHTML","results","addEventListener","event","preventDefault","searchMovieTrim","target","elements","navigation__input","value","trim","$7ecca67214b608f8$var$modalLinkEl","getElementById","$7ecca67214b608f8$var$modalEl","classList","toggle","$8a7e756c566dd1ea$var$refs","openModalBtn","closeModalBtn","backdrop","$8a7e756c566dd1ea$var$offCloseModal","window","removeEventListener","$8a7e756c566dd1ea$var$onEscKeyPress","remove","e","code","add","currentTarget"],"version":3,"file":"index-lib.d2649965.js.map"}