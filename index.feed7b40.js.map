{"mappings":"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","sources":["src/js/createMovieCard.js","src/js/spinner.js","src/js/infinityScroll.js","src/js/fetchTrendingMovies.js","src/js/fetchQueryMovies.js","src/js/infinityScrollQuery.js","src/js/app.js","src/js/modalTeam.js","src/js/preloader.js"],"sourcesContent":["import { localGenres } from './fetchGenres';\n\nexport const createMovieCard = movies => {\n  return movies\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        genre_ids,\n        id,\n        vote_average,\n      }) => {\n        let moviesGenres;\n\n        let moviesGenresFindName = localGenres\n          .filter(({ id }) => genre_ids.includes(id))\n          .map(({ name }) => name);\n\n        if (moviesGenresFindName.length <= 2) {\n          moviesGenres = moviesGenresFindName.join(', ');\n        } else {\n          moviesGenres =\n            moviesGenresFindName.slice(0, 2).join(', ') + ', Other';\n        }\n        const voteAverageToString = vote_average.toString();\n        return `\n                <li class=\"card__item\" data-id=\"${id}\">\n                    <a class=\"card card__link\" data-id=\"${id}\">\n                        <img class=\"card__img\" data-id=\"${id}\" src='https://image.tmdb.org/t/p/w500${poster_path}' alt='${\n          title || name\n        }' loading=\"lazy\"/>\n                        <p class=\"card__title\" data-id=\"${id}\">${\n          title || name\n        }</p>\n                        <div class=\"card__inform\" data-id=\"${id}\">\n                            <p class=\"card__genres\">${moviesGenres}</p>\n                            <p class=\"card__date\">\n                              <span></span>| \n                            ${(\n                              release_date || first_air_date\n                            ).slice(0, 4)}</p>\n                            <span class=\"card__vote visually-hidden\">${voteAverageToString.slice(0,3)}</span>\n                        </div>\n                    </a>\n                </li>\n            `;\n      }\n    )\n    .join('');\n};\n","export default class Spinner {\n    constructor({hidden = false}) {\n        this.refs = this.getRefs();\n        hidden && this.hide();\n    }\n\n    getRefs() {\n        const refs = {};\n        refs.loader = document.querySelector('.loader');\n        return refs;\n    }\n\n    show() {\n        this.refs.loader.classList.remove('is-hidden');\n    }\n\n    hide() {\n        this.refs.loader.classList.add('is-hidden')\n    }\n};\n","import {createMovieCard} from './createMovieCard';\nimport { fetchTrendingMovies } from './fetchTrendingMovies';\nimport { refs } from './refs';\nimport Spinner from './spinner';\n\nexport let fetchOptions = {\n    currentPage: 1,\n    currentQueryPage: 1,\n};\n\nexport const resetPage = () => {\n    fetchOptions.currentPage = 1;\n}\n\nconst observerOptions = {\n  rootMargin: '0px',\n  threshold: 1.0,\n};\n\nconst observer = new IntersectionObserver(entries => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      onLoadMore();\n      console.log('is intersecting');\n    }\n  });\n}, observerOptions);\n\nsetObserverOn();\n\nexport function setObserverOn() {\n    observer.observe(document.querySelector('.scroll-check'));\n};\n    \nexport function setObserverOff() {\n    observer.unobserve(document.querySelector('.scroll-check'));\n};\n\n\nconst spinner = new Spinner({\n  loader: '.loader',\n  hidden: true,\n});\n\nfunction onLoadMore() {\n\nfetchTrendingMovies(spinner).then(movies => {\n    try {\n        if(fetchOptions.currentPage === movies.total_pages) {\n            refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n            window.alert('Sorry this is the last page, we do not have any movies for you :(');\n            setObserverOff();\n            return ;\n        }\n        fetchOptions.currentPage += 1;\n        refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n\n    } catch (error) {\n        console.log(error);\n    }\n});\n}\n\n","import { fetchOptions } from './infinityScroll'\n\nexport const fetchTrendingMovies = async (spinner) => {\n  try {\n    spinner.show()\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/week?api_key=ff98b74c6ada2972698b8eff6707845a&page=${fetchOptions.currentPage}`\n\n    );\n  spinner.hide()\n  return response.json();\n\n  } catch (error) {\n    throw Error(response.statusText);\n  }\n};\n\n\n// fetchTrendingMovies().then(movies => console.log(movies.results));\n","// API Key: ff98b74c6ada2972698b8eff6707845a\n// Get trending\nimport { fetchOptions } from './infinityScroll';\nimport { setObserverOff } from './infinityScroll';\n\nexport const fetchQueryMovies = async name => {\n  try {\n    const response = await fetch(`\n        https://api.themoviedb.org/3/search/movie?api_key=ff98b74c6ada2972698b8eff6707845a&language=en-US&page=${fetchOptions.currentQueryPage}&include_adult=false&query=${name}`);\n    fetchOptions.currentQueryPage += 1;\n    setObserverOff();\n    return await response.json();\n  } catch (error) {\n    throw Error(response.statusText);\n  }\n};\n","import {createMovieCard} from './createMovieCard';\nimport { fetchQueryMovies } from './fetchQueryMovies';\nimport {refs} from './refs';\nimport Spinner from './spinner';\nimport { searchMovieTrim} from './app';\nimport { setObserverOff } from './infinityScroll';\n\nexport let fetchOptions = {\n    currentPage: 1,\n    currentQueryPage: 1,\n};\n\nexport const resetQueryPage = () => {\n    fetchOptions.currentQueryPage = 1;\n}\n\nconst spinner = new Spinner({\n    loader: '.loader',\n    hidden: true,\n})\n\nexport function onLoadMoreQuery() {\n    setObserverOff();\n    fetchQueryMovies(searchMovieTrim).then(movies => {\n        \n        try {\n            refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n                \n        } catch (error) {\n            console.log(error);\n        }\n    });\n}","import { fetchQueryMovies } from './fetchQueryMovies';\nimport { createMovieCard } from './createMovieCard';\nimport { refs } from './refs';\nimport Spinner from './spinner';\nimport { resetPage } from './infinityScroll';\nimport { onLoadMoreQuery } from './infinityScrollQuery';\n\nconst spinner = new Spinner({\n  loader: '.loader',\n  hidden: true,\n});\nexport let searchMovieTrim = '';\n\nrefs.form.addEventListener('submit', event => {\n  event.preventDefault();\n\n  let searchMovie = event.target.elements.navigation__input.value;\n  searchMovieTrim = searchMovie.trim();\n\n  fetchQueryMovies(searchMovieTrim).then(movies => {\n    if (searchMovieTrim === '' || movies.results.length === 0) {\n      refs.notificate.classList.remove('navigation__notificate-hidden');\n      document.getElementById('myForm').reset();\n      setTimeout(() => {\n        refs.notificate.classList.add('navigation__notificate-hidden');\n      }, 2500);\n    } else {\n      refs.gallery.innerHTML = createMovieCard(movies.results);\n    }\n    spinner.show();\n  });\n\n  const observerOptions = {\n    rootMargin: '-100px',\n    threshold: 1.0,\n  };\n  const observerQuery = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        onLoadMoreQuery();\n      }\n    });\n  }, observerOptions);\n\n  observerQuery.observe(document.querySelector('.scroll-check'));\n});\n","const modalLinkEl = document.getElementById('modalTeam');\nconst modalEl = document.querySelector('.modal-team');\nmodalLinkEl.addEventListener('click', modalOpen);\n\nfunction modalOpen(event) {\n  event.preventDefault();\n  modalEl.classList.toggle('visually-hidden');\n  modalEl.addEventListener('keydown');\n}\n\n// function modalClose() {\n//   if (modalEl.classList.contains('visually-hidden') === false) {\n//     console.log('modal');\n//   }\n//   console.log('modal is close');\n// }\n","window.onload = function () {\n    document.body.classList.add('loaded_hiding');\n    window.setTimeout(function () {\n      document.body.classList.add('loaded');\n      document.body.classList.remove('loaded_hiding');\n    }, 1000);\n  }"],"names":["$7zQK0","parcelRequire","$9134abd8877f9bb7$export$9d27b867a89df126","movies","map","poster_path","title","name","name1","release_date","first_air_date","genre_ids","id","id1","vote_average","moviesGenres","moviesGenresFindName","localGenres","filter","includes","length","join","slice","voteAverageToString","toString","$00cfbbdd8a53f936$export$2e2bcd8739ae039","getRefs","refs","loader","document","querySelector","show","this","classList","remove","hide","add","constructor","hidden","$2ce415f148c0c897$export$e12dbb0aa5635c44","currentPage","currentQueryPage","$2ce415f148c0c897$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","async","spinner","response","fetch","json","error","Error","statusText","$2ce415f148c0c897$var$spinner","then","total_pages","$krGWQ","gallery","insertAdjacentHTML","results","window","alert","$2ce415f148c0c897$export$83528705734bea0e","console","log","rootMargin","threshold","unobserve","observe","$eeb1a3c6a97310e8$export$908f733cb80721a6","$ce77af30fc9a6e63$var$spinner","$ce77af30fc9a6e63$export$b20e827591442787","form","addEventListener","event","preventDefault","searchMovie","target","elements","navigation__input","value","trim","notificate","getElementById","reset","setTimeout","innerHTML","$7ecca67214b608f8$var$modalLinkEl","$7ecca67214b608f8$var$modalEl","toggle","onload","body"],"version":3,"file":"index.feed7b40.js.map"}