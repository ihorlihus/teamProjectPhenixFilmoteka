{"mappings":"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","sources":["src/js/fetchGenres.js","src/js/createMovieCard.js","src/js/fetchQueryMovies.js","src/js/refs.js","src/js/spinner.js","src/js/infinityScroll.js","src/js/fetchTrendingMovies.js","src/js/app.js","src/js/modalTeam.js","src/js/buildModalMarcup.js","src/js/renderOpenModal.js","src/js/preloader.js"],"sourcesContent":["export const fetchGenres = async () => {\n    try {\n        const response = await fetch(`\n            https://api.themoviedb.org/3/genre/movie/list?api_key=ff98b74c6ada2972698b8eff6707845a&language=en-US\n        `);\n        return await response.json();\n    } catch (error) {\n        throw Error(response.statusText);\n    }\n}\n\nexport let localGenres;\n\nfetchGenres().then(genres => {\n    localStorage.setItem(\"genres\", JSON.stringify(genres.genres));\n    const saveGenres = localStorage.getItem(\"genres\");\n    localGenres = JSON.parse(saveGenres);\n});\n","import { localGenres } from './fetchGenres';\n\nexport const createMovieCard = movies => {\n  return movies\n    .map(\n      ({\n        poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        genre_ids,\n        id,\n        vote_average,\n      }) => {\n        let moviesGenres;\n\n        let moviesGenresFindName = localGenres\n          .filter(({ id }) => genre_ids.includes(id))\n          .map(({ name }) => name);\n\n        if (moviesGenresFindName.length <= 2) {\n          moviesGenres = moviesGenresFindName.join(', ');\n        } else {\n          moviesGenres =\n            moviesGenresFindName.slice(0, 2).join(', ') + ', Other';\n        }\n        const voteAverageToString = vote_average.toString();\n        return `\n                <li class=\"card__item\" data-id=\"${id}\">\n                    <a class=\"card card__link\" data-id=\"${id}\">\n                        <img class=\"card__img\" data-id=\"${id}\" src='https://image.tmdb.org/t/p/w500${poster_path}' alt='${\n          title || name\n        }' loading=\"lazy\"/>\n                        <p class=\"card__title\" data-id=\"${id}\">${\n          title || name\n        }</p>\n                        <div class=\"card__inform\" data-id=\"${id}\">\n                            <p class=\"card__genres\">${moviesGenres}</p>\n                            <p class=\"card__date\">\n                              <span></span>\n                            ${(\n                              release_date || first_air_date\n                            ).slice(0, 4)}</p>\n                            <span class=\"card__vote\">${voteAverageToString.slice(0,3)}</span>\n                        </div>\n                    </a>\n                </li>\n            `;\n      }\n    )\n    .join('');\n};\n","// API Key: ff98b74c6ada2972698b8eff6707845a\n// Get trending\n\nexport const fetchQueryMovies = async (name) => {\n    try {\n        const response = await fetch(`\n        https://api.themoviedb.org/3/search/movie?api_key=ff98b74c6ada2972698b8eff6707845a&language=en-US&page=1&include_adult=false&query=${name}\n            `);\n        return await response.json();  \n    } catch (error) {\n        throw Error(response.statusText);\n    }\n}\n","export const refs = {\n  gallery: document.querySelector('.gallery'),\n  form: document.querySelector('.navigation__form'),\n  notificate: document.querySelector('.navigation__notificate'),\n  backdrop: document.querySelector('.js-backdrop'),\n  watchButton: document.querySelector('.button-watched__modal'),\n  queueButton: document.querySelector('.button-queue__modal'),\n  modal: document.querySelector('.modal__content'),\n  closeModalBtn: document.querySelector('.modal-close'),\n};\n","export default class Spinner {\n    constructor({hidden = false}) {\n        this.refs = this.getRefs();\n        hidden && this.hide();\n    }\n\n    getRefs() {\n        const refs = {};\n        refs.loader = document.querySelector('.loader');\n        return refs;\n    }\n\n    show() {\n        this.refs.loader.classList.remove('is-hidden');\n    }\n\n    hide() {\n        this.refs.loader.classList.add('is-hidden')\n    }\n};\n","import {createMovieCard} from './createMovieCard';\nimport { fetchQueryMovies } from './fetchQueryMovies';\nimport { fetchTrendingMovies } from './fetchTrendingMovies';\nimport {refs} from './refs';\nimport Spinner from './spinner';\n\nlet fetchOptions = {\n    currentPage: 1,\n};\n\nconst observerOptions = {\n    rootMargin: '0px',\n    threshold: 1.0\n};\n    \nconst observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            onLoadMore();\n        };\n    });\n}, observerOptions);\n\nsetObserverOn();\n\nfunction setObserverOn() {\n    observer.observe(document.querySelector('.scroll-check'));\n};\n    \nfunction setObserverOff() {\n    observer.unobserve(document.querySelector('.scroll-check'));\n};\n\nconst spinner = new Spinner({\n    loader: '.loader',\n    hidden: true,\n})\n\nfunction onLoadMore() {\n    \n    fetchTrendingMovies().then(movies => {\n        try {\n            fetchOptions.currentPage += 1;\n            refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n            spinner.hide();\n        } catch (error) {\n            console.log(error);\n        }\n    });\n\n    // fetchQueryMovies().then(movies => {\n    //     try {\n    //         fetchOptions.currentPage += 1;\n    //         refs.gallery.insertAdjacentHTML('beforeend', createMovieCard(movies.results));\n    //         spinner.hide();     \n    //     } catch (error) {\n    //         console.log(error);\n    //     }\n    // });\n}\n    \n    \n\n\n// function drawMovies(data) {\n//     const movies = data.hits;\n//     totalMovies = data.totalHits;\n    \n//     if (!totalMovies) {\n//         Notify.failure('Sorry, there are NO MOVIES matching your search query. Please try again.');\n            \n//         refs.form.reset();\n//         return;\n//     };\n    \n//     if (fetchOptions.currentPage === 1) {\n//         Notify.success(`Wow! We found for you${totalMovies} movies.`);\n//     };\n    \n//     createMovieCard(movies.results);\n    \n//     setObserverOn();\n// };","import { fetchOptions } from './infinityScroll'\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/week?api_key=ff98b74c6ada2972698b8eff6707845a`\n      // `https://api.themoviedb.org/3/trending/movie/week?api_key=ff98b74c6ada2972698b8eff6707845a&page=${fetchOptions.currentPage}`\n    );\n    return response.json();\n  } catch (error) {\n    throw Error(response.statusText);\n  }\n};\n\n\n// fetchTrendingMovies().then(movies => console.log(movies.results));\n","\nimport {fetchTrendingMovies} from './fetchTrendingMovies';\nimport {fetchQueryMovies} from './fetchQueryMovies';\nimport {createMovieCard} from './createMovieCard';\nimport {refs} from './refs';\nimport Spinner from './spinner';\n\nconst spinner = new Spinner({\n    loader: '.loader',\n    hidden: true,\n})\n\nrefs.form.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const searchMovie = event.target.elements.navigation__input.value;\n    const searchMovieTrim = searchMovie.trim();\n\n    fetchQueryMovies(searchMovieTrim)\n        .then(movies => {\n            if (searchMovieTrim === '' || movies.results.length === 0) {\n                refs.notificate.classList.remove('visually-hidden');\n                \n            } else {\n                refs.gallery.innerHTML = createMovieCard(movies.results);\n            }\n                spinner.show();\n            }\n        )    \n})\n\n\n\n","const modalLinkEl = document.getElementById('modalTeam');\nconst modalEl = document.querySelector('.modal-team');\nmodalLinkEl.addEventListener('click', modalOpen);\n\nfunction modalOpen(event) {\n  event.preventDefault();\n  modalEl.classList.toggle('visually-hidden');\n  modalEl.addEventListener('keydown');\n}\n\n// function modalClose() {\n//   if (modalEl.classList.contains('visually-hidden') === false) {\n//     console.log('modal');\n//   }\n//   console.log('modal is close');\n// }\n","export function openModalMovie(data) {\n  const {\n    vote_average,\n    vote_count,\n    genres,\n    original_title,\n    title,\n    poster_path,\n    original_name,\n    popularity,\n    overview,\n    id,\n  } = data;\n\n  return `\n        <img class=\"img-modal\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"\" data-id=${id} />\n        <div class=\"container-modal\">\n          <h1 class=\"title-modal\">${title}</h1>\n          <table class=\"table\">\n            <tr>\n              <th class=\"table__text\">Vote / Votes</th>\n              <th><span class=\"vote-average\">${vote_average}</span> / <span class=\"vote-count\">${vote_count}</span></th>\n            </tr>\n            <tr>\n              <th class=\"table__text\">Popularity</th>\n              <th>${popularity}</th>\n            </tr>\n            <tr>\n              <th class=\"table__text\">Original Title</th>\n              <th>${original_title ? original_title : original_name}</th>\n            </tr>\n            <tr>\n              <th class=\"table__text\">Genre</th>\n              <th>${genres ? genres.map(genre => genre.name) : ' '}</th>\n            </tr>\n          </table>\n          <h2 class=\"title-about__modal\">ABOUT</h2>\n          <p class=\"about-text__modal\">${overview}\n          </p>\n        </div>\n      </div>\n    </div>`;\n}\n","import { refs } from './refs';\nimport { openModalMovie } from './buildModalMarcup';\n\nasync function request(id) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=deeaaa6f7bb1ec2c1571c017660b3676`\n    );\n    const film = response.json();\n    return film;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nrefs.gallery.addEventListener('click', e => {\n  e.preventDefault();\n\n  request(e.target.dataset.id)\n    .then(data => {\n      onOpenModal();\n\n      refs.modal.innerHTML = '';\n      refs.modal.insertAdjacentHTML('afterbegin', openModalMovie(data));\n      refs.backdrop.addEventListener('click', onBackdropClick);\n      refs.closeModalBtn.addEventListener('click', offCloseModal);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n});\n\nfunction onOpenModal() {\n  window.addEventListener('keydown', onEscKeyPress);\n  refs.backdrop.classList.add('show-modal');\n}\n\nfunction offCloseModal() {\n  window.removeEventListener('keydown', onEscKeyPress);\n  refs.backdrop.classList.remove('show-modal');\n}\n\nfunction onBackdropClick(e) {\n  if (e.currentTarget === e.target) {\n    offCloseModal();\n  }\n}\n\nfunction onEscKeyPress(e) {\n  const ESC_KEY_CODE = 'Escape';\n  if (e.code === ESC_KEY_CODE) {\n    offCloseModal();\n  }\n}\n","window.onload = function () {\n    document.body.classList.add('loaded_hiding');\n    window.setTimeout(function () {\n      document.body.classList.add('loaded');\n      document.body.classList.remove('loaded_hiding');\n    }, 1000);\n  }"],"names":["$5844b68ee09a1fe1$export$51d062533fa741c4","async","response","fetch","json","error","Error","statusText","$5844b68ee09a1fe1$export$e95d448b93b2cdb","then","genres","localStorage","setItem","JSON","stringify","saveGenres","getItem","parse","$9134abd8877f9bb7$export$9d27b867a89df126","movies","map","poster_path","title","name","name1","release_date","first_air_date","genre_ids","id","id1","vote_average","moviesGenres","moviesGenresFindName","filter","includes","length","join","slice","voteAverageToString","toString","$eeb1a3c6a97310e8$export$908f733cb80721a6","$ee27a4d7c64fc8c4$export$21666b427502ea6d","gallery","document","querySelector","form","notificate","backdrop","watchButton","queueButton","modal","closeModalBtn","$00cfbbdd8a53f936$export$2e2bcd8739ae039","getRefs","refs","loader","show","this","classList","remove","hide","add","constructor","hidden","$2ce415f148c0c897$var$fetchOptions","currentPage","$2ce415f148c0c897$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","$be3cba44527b5869$export$a2840eca364d9ff2","insertAdjacentHTML","results","$2ce415f148c0c897$var$spinner","console","log","rootMargin","threshold","observe","$ce77af30fc9a6e63$var$spinner","addEventListener","event","preventDefault","searchMovieTrim","target","elements","navigation__input","value","trim","innerHTML","$7ecca67214b608f8$var$modalLinkEl","getElementById","$7ecca67214b608f8$var$modalEl","$0b805b67754fd9d5$export$3c9e96c8bb4f4ee4","data","vote_count","original_title","original_name","popularity","overview","genre","$0a74a33e2a19043d$var$offCloseModal","window","removeEventListener","$0a74a33e2a19043d$var$onEscKeyPress","$0a74a33e2a19043d$var$onBackdropClick","e","currentTarget","code","toggle","onload","body","setTimeout","message","$0a74a33e2a19043d$var$request","dataset","catch"],"version":3,"file":"index-lib.3260a54f.js.map"}